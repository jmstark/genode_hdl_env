#!/bin/bash

#
# \brief   Tool for generating Genode emulators from verilog designs
# \author  Martin Stein
# \date    2012-08-02
#

#
# Print the tools manual
#
print_usage () {
	echo ""
	echo "Tool for generating Genode emulators from verilog designs"
	echo ""
	echo "usage:"
	echo ""
	echo "  Go to the directory where you want your Genode emulation-target"
	echo "  to reside and run this tool as follows:"
	echo ""
	echo "    verilate <top_module> <bus_interface> <genode_dir> <arch> [<modules_dir>]"
	echo ""
	echo "  It is thereby recommended to use a fresh target directory, because"
	echo "  the tool simply overrides files in the directory you call it from!"
	echo ""
	echo "  <top_module>    name of the top module of your design"
	echo ""
	echo "  <bus_interface> Slave bus interface of your top module."
	echo "                  Can be: 'no_bus', 'wishbone'"
	echo ""
	echo "  <genode_dir>    root directory of the genode sources"
	echo ""
	echo "  <arch>          targeted architecture, can be: 'x86', 'arm'"
	echo ""
	echo "  <modules_dir>   Directory of all modules your design uses."
	echo "                  If not set the local directory is used instead."
	echo "                  Module files must be named like '<module_name>.v'."
	echo ""
	exit 1
}

#
# Exit because of a missing file
#
# \param 1  targeted file
#
file_not_found() {
	echo "Error: File "$1" not found" >&2
	exit 1
}

#
# Exit because of a missing program
#
# \param 1  targeted program
#
program_not_found() {
	echo "Error: You need '"$1"' to be installed to use this tool" >&2
	exit 1
}

# print the manual if not enough arguments are given
[ "$#" -ge 4 ] || print_usage

# fetch command line arguments
TOP_MODULE=$1
BUS_INTERFACE=$2
GENODE_DIR=$3
ARCH=$4
MODULES_DIR=$5

# check wether all program dependencies are fullfilled
VERILATOR=$GENODE_DIR"/libports/tool/verilator/bin/verilator"
command -v $VERILATOR >/dev/null 2>&1 || program_not_found $VERILATOR

# validate targeted bus interface
case $BUS_INTERFACE in
"no_bus")

	# enrich variables for the generation of 'target.mk'
	LIBS=$LIBS" verilator_env"
	;;
"wishbone")

	# enrich variables for the generation of 'target.mk'
	SRC_CC=$SRC_CC" wishbone_slave.cc"
	LIBS=$LIBS" verilator_env_wb"
	;;
*) print_usage
esac

# if modules path has no ending slash add it automatically
[ "$MODULES_DIR" == "" ] || {
	[ "$MODULES_DIR" == $(echo "$MODULES_DIR" | sed 's%/$%%') ] && {
		MODULES_DIR=$MODULES_DIR"/"
	}
}

# check if top module exists
TOP_FILE=$MODULES_DIR$TOP_MODULE.v
[ -f "$TOP_FILE" ] || file_not_found $TOP_FILE

# create build dir and a dummy simulation-file
BUILD_DIR="build.verilate"
SIMUL_FILE="$BUILD_DIR/main.cc"
mkdir -p $BUILD_DIR
echo "" > $SIMUL_FILE

# transcompile verilog design to C++ simulation sourcecode
$VERILATOR -Wall -Wno-lint --cc $TOP_FILE --exe $SIMUL_FILE -y $MODULES_DIR --Mdir $BUILD_DIR

# initialize parameters for the compilation of the simulation
TARGET_DIR=$PWD
cd $BUILD_DIR
MAKE_TARGET="V"$TOP_MODULE
MAKE_FILE="V"$TOP_MODULE".mk"

# patch the generated makefile to avoid linking and thereby implied errors
sed -e 's/^\t\$(LINK).*/\t@echo "Target ´'$MAKE_TARGET'´ successfully build"/' $MAKE_FILE > patched.mk
mv patched.mk $MAKE_FILE

# compile the simulation sourcecode to object files
make -f $MAKE_FILE $MAKE_TARGET GENODE_DIR=$GENODE_DIR GENODE_GCC="genode-"$ARCH"-"

# fetch files that are needed by the Genode emulation enviroment
OBJECT_FILES=$OBJECT_FILES" verilated.o"
OBJECT_FILES=$OBJECT_FILES" V"$TOP_MODULE"__ALL.a"
CP_FILES=$OBJECT_FILES" V"$TOP_MODULE".h"
cp -f $CP_FILES $TARGET_DIR

# generate the 'target.mk' file
TARGET_MK=$TARGET_DIR"/target.mk"
EXT_OBJECTS=$(echo "$OBJECT_FILES" | sed 's/ / \$(PRG_DIR)\//g')
cat > $TARGET_MK <<EOF
#
# \\brief   Emulation of the verilog design '$TOP_MODULE'
# \\author  Automatically generated by 'tool/verilate'
# \\date    $(date +%Y-%m-%d)
#

# set the program name
TARGET = $TOP_MODULE

# add C++ sources
SRC_CC +=$SRC_CC

# add simulation objects generated by 'verilator'
EXT_OBJECTS +=$EXT_OBJECTS

# add library dependencies
LIBS +=$LIBS

EOF

