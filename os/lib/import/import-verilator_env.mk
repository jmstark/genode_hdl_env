#
# This file ensures that the presence of verilog sources plus the use of
# 'verilator_env' implies the generation of a temporary C++ emulation within
# the build directory. This emulation emulates the verilog module named after
# the first given verilog source. Generating the emulation is always done
# before the compilation of the 'SRC_CC' files, because they might depend on
# the emulation sources.
#


# test for the existence of a tool
check_tool = $(if $(shell which $(1)),,$(error Need to have '$(1)' installed.))

# add include paths
REP_INC_DIR   += src/lib/verilator_env/include
TOOL_INC       = tool/verilator/share/verilator/include
INC_DIR       += $(call select_from_repositories,$(TOOL_INC))

# targeted emulator
EMU_NAME   = $(basename $(notdir $(VERILATOR_SRC)))
EMU_HEADER = V$(EMU_NAME).h
EMU_LIB    = V$(EMU_NAME)__ALL.a

# configure verilator wich generates C++ sources + makefile from verilog
VERILATOR         = $(call select_from_repositories,tool/verilator/bin/verilator)
VERILATOR_SRC     = $(firstword $(SRC_VLG))
VERILATOR_DST_DIR = verilated
VERILATOR_EXE     = verilation_exe.dummy
VERILATOR_OPT     = -Wall -Wno-lint \
                    --cc $(VERILATOR_SRC) -y $(PRG_DIR) \
                    --Mdir $(VERILATOR_DST_DIR) \
                    --exe $(VERILATOR_DST_DIR)/$(VERILATOR_EXE)

# configure the make that gets generated by verilator to compile the emulator
VMAKE          = V$(EMU_NAME).mk
VMAKE_TARGET   = V$(EMU_NAME)
VMAKE_PATCHED  = $(VMAKE).patched
VMAKE_CXX_OPT += $(INCLUDES) $(CC_CXX_OPT)
VMAKE_PERL     = /usr/bin/perl
VMAKE_OPT      = GENODE_CXX_OPT="$(VMAKE_CXX_OPT)" \
                 GENODE_PERL="$(VMAKE_PERL)" \
                 GENODE_VERBOSE="$(VERBOSE)" \
                 GENODE_GCC_PREFIX="$(CROSS_DEV_PREFIX)"

#
# For any reason we can't communicate MSG variables through VMAKE_OPT.
# Thus we do export them as it should have no effect on other subprograms.
#
export GENODE_MSG_LINK    = $(MSG_LINK)
export GENODE_MSG_COMP    = $(MSG_COMP)
export GENODE_MSG_BUILD   = $(MSG_BUILD)
export GENODE_MSG_MERGE   = $(MSG_MERGE)
export GENODE_MSG_CONVERT = $(MSG_CONVERT)
export GENODE_MSG_CONFIG  = $(MSG_CONFIG)
export GENODE_MSG_CLEAN   = $(MSG_CLEAN)
export GENODE_MSG_ASSEM   = $(MSG_ASSEM)
export GENODE_MSG_INST    = $(MSG_INST)
export GENODE_MSG_PRG     = $(MSG_PRG)
export GENODE_MSG_LIB     = $(MSG_LIB)

# enable the verilog emulation enviroment only if 'EMU_NAME' is given
ifneq ($(EMU_NAME),)

  # test for the existence of verilator
  ifeq ($(VERILATOR),)
    $(error Need to have Genode package 'verilator' installed. \
            You can meet this condition by doing \
            'make prepare PKG="verilator"' within 'libports')
  endif

  # link against the verilog emulation enviroment
  EXT_OBJECTS += $(VERILATOR_DST_DIR)/verilated.o \
                 $(VERILATOR_DST_DIR)/$(EMU_LIB)

  # C++ sources get not build before they can make use of the verilog emulation
  $(SRC_CC): $(VERILATOR_DST_DIR)/$(EMU_LIB)

  # add include paths that do not exist yet, 'CC_OPT' gets not checked
  CC_OPT += -I$(shell pwd)/verilated
endif

# use the makefile generated by verilator to compile the C++ emulation sources
$(VERILATOR_DST_DIR)/$(EMU_LIB): $(VERILATOR_DST_DIR)/$(VMAKE_PATCHED)
	$(VERBOSE)cd $(VERILATOR_DST_DIR); \
		$(MAKE) -f $(VMAKE_PATCHED) $(VMAKE_TARGET) $(VMAKE_OPT)

# patch makefile to avoid linking, it's unnecessary and always throws errors
$(VERILATOR_DST_DIR)/$(VMAKE_PATCHED): $(VERILATOR_DST_DIR)/$(VMAKE)
	$(VERBOSE)cd $(VERILATOR_DST_DIR); \
		sed -e 's/^\t\$$(LINK).*/\t/' $(VMAKE) > $(VMAKE_PATCHED)

# generate C++ emulation sources + makefile from verilog sources via verilator
$(VERILATOR_DST_DIR)/$(VMAKE): $(VERILATOR_SRC) \
                               $(VERILATOR_DST_DIR)/$(VERILATOR_EXE) \
                               $(VMAKE_PERL)
	$(MSG_CONVERT)$(VERILATOR_SRC)
	$(VERBOSE)$(VERILATOR) $(VERILATOR_OPT)

# ensure that a dummy workbench exists for the use by verilator
$(VERILATOR_DST_DIR)/$(VERILATOR_EXE): $(VERILATOR_DST_DIR)
	$(VERBOSE)touch $@

# ensure that the directory for the emulation files exists
$(VERILATOR_DST_DIR):
	$(VERBOSE)mkdir -p $(VERILATOR_DST_DIR)

# include imports of implied libraries
include $(call select_from_repositories,lib/import/import-libc.mk)
include $(call select_from_repositories,lib/import/import-stdcxx.mk)

#
# Clean also the temporarily generated emulation files
#

clean_prg_objects: clean_verilator_env_build_dir

clean_verilator_env_build_dir:
	$(VERBOSE)rm -rf $(VERILATOR_DST_DIR)

#
# Tool dependencies
#

$(VMAKE_PERL):
	$(call check_tool,$(VMAKE_PERL))

